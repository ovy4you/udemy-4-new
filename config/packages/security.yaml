security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\ProfileUser: bcrypt
       # App\Entity\User: bcrypt
#        Symfony\Component\Security\Core\User\User: plaintext
    providers:
#        in_memory:
#            memory:
#                users:
#                    john:
#                        password: helloJohn
#                        roles: 'ROLE_USER'
        database:
            entity:
                class: App\Entity\ProfileUser
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            form_login:
                check_path: security_login
                login_path: security_login
                csrf_token_generator: security.csrf.token_manager
                default_target_path: micro_post
            logout:
                path: security_logout
                target: micro_post
            # activate different ways to authenticate

            #http_basic: ~
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html
#        api:
#            pattern: ^/api
#            stateless: true
#            anonymous: true
#            json_login:
#                # Here authentication will happen (token generation)
#                check_path: /api/login_check
#                # Handle successfull authentication
#                success_handler: lexik_jwt_authentication.handler.authentication_success
#                # Handle authentication failure (invalid credentials, no credentials etc).
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure
#            guard:
#                authenticators:
#                    - lexik_jwt_authentication.jwt_token_authenticator
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
       ## - { path: ^/api/login,       roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,     roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/micropost/edit/, roles: ROLE_USER }
        - { path: ^/micropost/, roles: IS_AUTHENTICATED_ANONYMOUSLY }
